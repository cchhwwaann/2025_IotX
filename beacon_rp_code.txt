import asyncio
import math
import time
from bleak import BleakScanner

# ======== 비콘 설정 ========
BEACONS = {
    "90:70:65:fc:65:43": {"pos": (0.0, 0.0), "tx1m": -59.0, "rssi": -90.0},  # B1
    "f0:c7:7f:f1:da:cb": {"pos": (3.0, 0.0), "tx1m": -59.0, "rssi": -90.0},  # B2
    "6c:c3:74:ed:4b:e7": {"pos": (1.5, 2.6), "tx1m": -59.0, "rssi": -90.0},  # B3
}
# ======== 모델/필터 파라미터 ========
ALPHA_RSSI = 0.25   # RSSI EMA 계수(0.15~0.30 튜닝)
ALPHA_POS  = 0.20   # 위치 EMA 계수
PATH_N     = 2.2    # 감쇠 지수 n (실내 1.8~3.0, 캘리브레이션으로 조정)
P_WEIGHT   = 3.0    # 가중중심에서 1/d^p 의 p
RSSI_MIN, RSSI_MAX = -95, -10  # 유효 RSSI 범위(이상치 컷)

# ======== 상태 ========
posX, posY = 0.0, 0.0

def rssi_to_dist(rssi: float, tx1m: float, n: float) -> float:
    """로그거리 모델: d = 10^((tx1m - rssi)/(10n))"""
    expv = (tx1m - rssi) / (10.0 * n)
    # 보호(수학적 폭주 방지)
    if expv > 6.0:   expv = 6.0
    if expv < -2.0:  expv = -2.0
    return 10.0 ** expv

def step_position():
    """현재 EMA RSSI들로 거리 계산 → 가중중심 → 위치 EMA 업데이트"""
    global posX, posY
    wsum = 0.0
    wx = 0.0
    wy = 0.0
    for m, b in BEACONS.items():
        d = max(0.001, rssi_to_dist(b["rssi"], b["tx1m"], PATH_N))
        w = 1.0 / (d ** P_WEIGHT)
        wsum += w
        bx, by = b["pos"]
        wx += w * bx
        wy += w * by
    if wsum > 0:
        x = wx / wsum
        y = wy / wsum
        posX = ALPHA_POS * x + (1.0 - ALPHA_POS) * posX
        posY = ALPHA_POS * y + (1.0 - ALPHA_POS) * posY

async def main():
    scanner = BleakScanner()
    print("Scanning... (Ctrl+C to stop)")
    while True:
        # 1초간 스캔 (중복 보고 포함됨)
        devs = await scanner.discover(timeout=1.0)
        # RSSI EMA 업데이트
        for d in devs:
            mac = d.address.lower()
            if mac in BEACONS and d.rssi is not None and RSSI_MIN < d.rssi < RSSI_MAX:
                prev = BEACONS[mac]["rssi"]
                BEACONS[mac]["rssi"] = ALPHA_RSSI * d.rssi + (1.0 - ALPHA_RSSI) * prev

        # 위치 업데이트
        step_position()

        # 디버그 출력
        rssi_list = [round(BEACONS[m]["rssi"], 1) for m in BEACONS]
        dists = [
            round(rssi_to_dist(BEACONS[m]["rssi"], BEACONS[m]["tx1m"], PATH_N), 2)
            for m in BEACONS
        ]
        print(f"RSSI {rssi_list} | d(m) {dists} | pos {posX:.2f},{posY:.2f}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nStopped.")
